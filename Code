import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import io
import re
import csv
import os

# Specify the path to Tesseract executable
pytesseract.pytesseract.tesseract_cmd = r'C:\Tesseract-OCR\tesseract.exe'

# Function to extract text from an image using OCR
def extract_text_from_image(image):
    text = pytesseract.image_to_string(image)
    return text

# Function to process each page and extract sections
def process_page(page):
    text_blocks = page.get_text("blocks")
    sections = {
        "revenue": [],
        "tax_proofs": [],
        "documentation": [],
        "salary": [],
        "loan_details": [],
        "loan_payments": []
    }
    
    for block in text_blocks:
        x0, y0, x1, y1, text, block_no, block_type = block
        if block_type == 0:  # text block
            if "revenue" in text.lower():
                sections["revenue"].append(text)
            elif "tax" in text.lower():
                sections["tax_proofs"].append(text)
            elif "documentation" in text.lower():
                sections["documentation"].append(text)
            elif "salary" in text.lower():
                sections["salary"].append(text)
            elif "loan details" in text.lower():
                sections["loan_details"].append(text)
            elif "loan payments" in text.lower():
                sections["loan_payments"].append(text)
        elif block_type == 1:  # image block
            image_bytes = page.get_image_data(block_no)
            image = Image.open(io.BytesIO(image_bytes))
            image_text = extract_text_from_image(image)
            # similar checks as text blocks
            if "revenue" in image_text.lower():
                sections["revenue"].append(image_text)
            elif "tax" in image_text.lower():
                sections["tax_proofs"].append(image_text)
            elif "documentation" in image_text.lower():
                sections["documentation"].append(image_text)
            elif "salary" in image_text.lower():
                sections["salary"].append(image_text)
            elif "loan details" in image_text.lower():
                sections["loan_details"].append(image_text)
            elif "loan payments" in image_text.lower():
                sections["loan_payments"].append(image_text)
    
    return sections

# Function to validate data
def validate_data(sections):
    validation_results = {}

    # Validate loan number in loan details
    loan_details_text = ' '.join(sections["loan_details"])
    loan_number_match = re.search(r'Loan Number: (\d+)', loan_details_text)
    if loan_number_match:
        loan_number = loan_number_match.group(1)
        validation_results["loan_number"] = loan_number
    else:
        validation_results["loan_number"] = "Missing"

    # Validate revenue range
    revenue_text = ' '.join(sections["revenue"])
    revenue_matches = re.findall(r'Revenue: (\d+)', revenue_text)
    revenue_numbers = list(map(int, revenue_matches))
    if revenue_numbers:
        min_revenue = min(revenue_numbers)
        max_revenue = max(revenue_numbers)
        if min_revenue >= 1000 and max_revenue <= 100000:
            validation_results["revenue"] = "Valid"
        else:
            validation_results["revenue"] = "Out of range"
    else:
        validation_results["revenue"] = "Missing"

    return validation_results

# Function to save results to a CSV file
def save_to_csv(validation_results, csv_filename):
    with open(csv_filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Field", "Validation Result"])
        for key, value in validation_results.items():
            writer.writerow([key, value])

# Function to save sections to separate PDFs
def save_sections_to_pdfs(sections, original_pdf_name):
    for section, content in sections.items():
        if content:
            doc = fitz.open()
            for text in content:
                page = doc.new_page()
                page.insert_text((72, 72), text)
            new_filename = f"{original_pdf_name} - {section.capitalize()}.pdf"
            doc.save(new_filename)
            doc.close()

# Main function to process PDF
def process_pdf(file_path):
    pdf_document = fitz.open(file_path)
    all_sections = {
        "revenue": [],
        "tax_proofs": [],
        "documentation": [],
        "salary": [],
        "loan_details": [],
        "loan_payments": []
    }
    
    for page_number in range(pdf_document.page_count):
        page = pdf_document.load_page(page_number)
        page_sections = process_page(page)
        for section in all_sections:
            all_sections[section].extend(page_sections[section])

    validation_results = validate_data(all_sections)

    # Save validation results to a CSV file
    csv_filename = os.path.splitext(file_path)[0] + "_validation_results.csv"
    save_to_csv(validation_results, csv_filename)

    # Save sections to separate PDFs
    original_pdf_name = os.path.splitext(os.path.basename(file_path))[0]
    save_sections_to_pdfs(all_sections, original_pdf_name)

    return all_sections, validation_results

# Example usage
pdf_file_path = 'path/to/your/sample_text.pdf'
sections, validation_results = process_pdf(pdf_file_path)

# Output the results
print("Extracted Sections:")
for section, content in sections.items():
    print(f"\n{section.capitalize()}:")
    for item in content:
        print(item)

print("\nValidation Results:")
for key, result in validation_results.items():
    print(f"{key.capitalize()}: {result}")
